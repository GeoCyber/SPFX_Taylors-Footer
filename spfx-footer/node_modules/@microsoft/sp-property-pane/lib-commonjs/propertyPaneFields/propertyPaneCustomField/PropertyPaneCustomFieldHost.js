"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var ReactDOM = tslib_1.__importStar(require("react-dom"));
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
/**
 * This is used as the target property in the cases when the user does not provide a target proeprty
 * in the changeCallback.
 */
var CUSTOMFIELD_TARGETPROPERTY_PREFIX = '__CustomField_';
/**
 * This component help web part developers add custom components into the PropertyPane.
 * The PropertyPane support a host of inbuilt field types. But that list can never be sufficient.
 * This component fills in the gap by allowing the web part developer to create
 * a custom field type and use the PropertyPane as per their need.
 *
 * @beta
 */
/* tslint:disable:no-any */
var PropertyPaneCustomFieldHost = /** @class */ (function (_super) {
    tslib_1.__extends(PropertyPaneCustomFieldHost, _super);
    function PropertyPaneCustomFieldHost() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyPaneCustomFieldHost.prototype.componentDidMount = function () {
        this._domElement = ReactDOM.findDOMNode(this);
        this.props.onRender(this._domElement, this.props.context, this._onChangedCallback.bind(this));
    };
    PropertyPaneCustomFieldHost.prototype.componentDidUpdate = function () {
        if (this._domElement) {
            this.props.onRender(this._domElement, this.props.context, this._onChangedCallback.bind(this));
        }
    };
    PropertyPaneCustomFieldHost.prototype.componentWillUnmount = function () {
        if (this.props.onDispose && this._domElement) {
            this.props.onDispose(this._domElement, this.props.context);
            var didUnmount = ReactDOM.unmountComponentAtNode(this._domElement);
            this._domElement = undefined;
            var logEntry = new sp_diagnostics_1._LogEntry(PropertyPaneCustomFieldHost._logSource.id, 'TryUnmountReactComponent', sp_diagnostics_1._LogType.Event, {
                didUnmount: didUnmount.toString()
            });
            sp_diagnostics_1._EngagementLogger.logEventWithLogEntry(logEntry);
        }
    };
    PropertyPaneCustomFieldHost.prototype.render = function () {
        return React.createElement("div", { className: 'ms-CustomFieldHost' });
    };
    // tslint:disable-next-line:no-any
    PropertyPaneCustomFieldHost.prototype._onChangedCallback = function (targetProperty, value) {
        if (!targetProperty) {
            // Appending the key to make it 'unique' to each custom field
            targetProperty = CUSTOMFIELD_TARGETPROPERTY_PREFIX + this.props.key;
            // Making the value 'undefined' if the target property is not specified.
            value = undefined;
        }
        this.props.onChanged(targetProperty, value);
    };
    /* tslint:enable:no-any */
    PropertyPaneCustomFieldHost._logSource = sp_diagnostics_1._LogSource.create('PropertyPaneCustomFieldHost');
    return PropertyPaneCustomFieldHost;
}(React.Component));
exports.default = PropertyPaneCustomFieldHost;
//# sourceMappingURL=PropertyPaneCustomFieldHost.js.map