"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenAcquisitionEventArgs = exports.BeforeRedirectEventArgs = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var Flights_1 = require("../common/Flights");
/**
 * Arguments for before redirecting for a full page authentication
 * @public
 */
var BeforeRedirectEventArgs = /** @class */ (function (_super) {
    tslib_1.__extends(BeforeRedirectEventArgs, _super);
    function BeforeRedirectEventArgs(redirectUrl, cancel) {
        var _this = _super.call(this) || this;
        _this.redirectUrl = redirectUrl;
        _this.cancel = cancel;
        return _this;
    }
    return BeforeRedirectEventArgs;
}(sp_core_library_1.SPEventArgs));
exports.BeforeRedirectEventArgs = BeforeRedirectEventArgs;
/**
 * Arguments for a token acquisition failure event.
 * @public
 */
var TokenAcquisitionEventArgs = /** @class */ (function (_super) {
    tslib_1.__extends(TokenAcquisitionEventArgs, _super);
    function TokenAcquisitionEventArgs(message, redirectUrl) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.redirectUrl = redirectUrl;
        return _this;
    }
    return TokenAcquisitionEventArgs;
}(sp_core_library_1.SPEventArgs));
exports.TokenAcquisitionEventArgs = TokenAcquisitionEventArgs;
/**
 * This class allows a developer to obtain OAuth2 tokens from Azure AD.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 *
 * @privateRemarks
 * AadTokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 *
 * @public
 * @sealed
 */
var AadTokenProvider = /** @class */ (function () {
    /**
     * @internal
     */
    function AadTokenProvider(configuration, oboConfiguration) {
        this._aadConfiguration = configuration;
        this._oboConfiguration = oboConfiguration;
        this._tokenAcquisitionEvent = new sp_core_library_1.SPEvent(AadTokenProvider._tokenAcquisitionEventId);
        this.onBeforeRedirectEvent = new sp_core_library_1.SPEvent(AadTokenProvider._onBeforeRedirectEventId);
    }
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token should not be cached by the caller since it is already cached by the method
     * itself.
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
     * An example of a resourceEndpoint would be https://graph.microsoft.com
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     */
    AadTokenProvider.prototype.getToken = function (resourceEndpoint, useCachedToken) {
        if (useCachedToken === void 0) { useCachedToken = true; }
        return this._getDeferredAadTokenProvider().then(function (tokenProvider) {
            return tokenProvider.getToken(resourceEndpoint, useCachedToken).then(function (response) {
                return response;
            });
        });
    };
    /**
     * Fetches the AAD OAuth2 token for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * The OAuth2 token should not be cached by the caller since it is already cached by the method
     * itself.
     *
     * @param resourceEndpoint - the resource for which the token should be obtained
     * @param useCachedToken - Allows the developer to specify if cached tokens should be returned.
     * An example of a resourceEndpoint would be https://graph.microsoft.com
     * @returns A promise that will be fullfiled with the token or that will reject
     *          with an error message
     *
     * @internal
     */
    AadTokenProvider.prototype._getTokenInternal = function (resourceEndpoint, configuration, useCachedToken) {
        if (useCachedToken === void 0) { useCachedToken = true; }
        return this._getDeferredAadTokenProvider().then(function (tokenProvider) {
            return tokenProvider
                ._getTokenInternal(resourceEndpoint, configuration, useCachedToken)
                .then(function (response) {
                return response;
            });
        });
    };
    /**
     * Fetches the AAD OAuth2 token data for a resource if the user that's currently logged in has
     * access to that resource.
     *
     * @internal
     */
    AadTokenProvider.prototype._getTokenData = function (resourceEndpoint, useCachedToken) {
        if (useCachedToken === void 0) { useCachedToken = true; }
        return this._getDeferredAadTokenProvider().then(function (tokenProvider) {
            return tokenProvider._getTokenData(resourceEndpoint, useCachedToken, true);
        });
    };
    Object.defineProperty(AadTokenProvider.prototype, "tokenAcquisitionEvent", {
        /**
         * Notifies the developer when Token Acquisition requires user action.
         * @eventproperty
         */
        get: function () {
            return this._tokenAcquisitionEvent;
        },
        enumerable: false,
        configurable: true
    });
    AadTokenProvider.prototype._getDeferredAadTokenProvider = function () {
        var _this = this;
        if (!this._aadTokenProvider) {
            this._aadTokenProvider = Promise.resolve().then(function () { return tslib_1.__importStar(require('./chunks/aadTokenProvider/DeferredAadTokenProvider' /* webpackChunkName: 'aadTokenProvider' */)); }).then(function (aadTokenProviderModule) {
                var isRichClientAuthEnabled = (0, Flights_1.isTeamsRichClientAuthFlightEnabled)();
                var deferredTokenProvider = new aadTokenProviderModule.DeferredAadTokenProvider(_this._tokenAcquisitionEvent, _this.onBeforeRedirectEvent, _this._aadConfiguration, _this._oboConfiguration, isRichClientAuthEnabled ? _this._oboFirstPartyTokenCallback : undefined, isRichClientAuthEnabled ? _this._oboThirdPartyTokenCallback : undefined);
                _this._tokenAcquisitionEvent = deferredTokenProvider.tokenAcquisitionEvent;
                return deferredTokenProvider;
            });
        }
        return this._aadTokenProvider;
    };
    /**
     * Token Acquisition Event String
     * @internal
     */
    AadTokenProvider._tokenAcquisitionEventId = 'tokenAcquisitionFailure';
    /**
     * Auth redirect Event String
     * @internal
     */
    AadTokenProvider._onBeforeRedirectEventId = 'onBeforeAuthRedirect';
    return AadTokenProvider;
}());
exports.default = AadTokenProvider;
//# sourceMappingURL=AadTokenProvider.js.map