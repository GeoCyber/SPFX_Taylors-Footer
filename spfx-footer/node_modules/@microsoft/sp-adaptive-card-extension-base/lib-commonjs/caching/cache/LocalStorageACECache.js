"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStorageACECache = void 0;
var tslib_1 = require("tslib");
var BaseAdaptiveCardExtensionCache_1 = require("./BaseAdaptiveCardExtensionCache");
/**
 * LKG Cache which uses LocalStorage as its backing store.
 *
 * @internal
 */
var LocalStorageACECache = /** @class */ (function (_super) {
    tslib_1.__extends(LocalStorageACECache, _super);
    function LocalStorageACECache() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LocalStorageACECache.getKey = function (siteId, listItemUniqueId) {
        return "AdaptiveCardExtension_LKG_".concat(siteId, "_").concat(listItemUniqueId);
    };
    Object.defineProperty(LocalStorageACECache, "instance", {
        get: function () {
            if (this._instance === undefined) {
                this._instance = new LocalStorageACECache();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    LocalStorageACECache.prototype.save = function (key, instanceId, cacheObject) {
        var localStorageEntry = this._getLocalStorageEntry(key);
        localStorageEntry.set(instanceId, cacheObject);
        var mapEntriesArray = Array.from(localStorageEntry.entries());
        localStorage.setItem(key, JSON.stringify(mapEntriesArray));
    };
    LocalStorageACECache.prototype.getFromSource = function (key, instanceId) {
        return this._getLocalStorageEntry(key).get(instanceId);
    };
    LocalStorageACECache.prototype._getLocalStorageEntry = function (key) {
        var cacheString = localStorage.getItem(key);
        var localStorageEntry = cacheString
            ? new Map(JSON.parse(cacheString))
            : new Map();
        return localStorageEntry;
    };
    return LocalStorageACECache;
}(BaseAdaptiveCardExtensionCache_1.BaseAdaptiveCardExtensionCache));
exports.LocalStorageACECache = LocalStorageACECache;
//# sourceMappingURL=LocalStorageACECache.js.map